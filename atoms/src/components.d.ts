/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {
  interface HTMLBlazeAccordionPaneElement extends HTMLStencilElement {
    'close': () => void;
    'header': string;
    'isOpen': () => boolean;
    'open': boolean;
    'show': () => void;
  }
  var HTMLBlazeAccordionPaneElement: {
    prototype: HTMLBlazeAccordionPaneElement;
    new (): HTMLBlazeAccordionPaneElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-accordion-pane': HTMLBlazeAccordionPaneElement;
  }
  interface ElementTagNameMap {
    'blaze-accordion-pane': HTMLBlazeAccordionPaneElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-accordion-pane': JSXElements.BlazeAccordionPaneAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeAccordionPaneAttributes extends HTMLAttributes {
      'header'?: string;
      'open'?: boolean;
    }
  }
}


declare global {
  interface HTMLBlazeAccordionElement extends HTMLStencilElement {

  }
  var HTMLBlazeAccordionElement: {
    prototype: HTMLBlazeAccordionElement;
    new (): HTMLBlazeAccordionElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-accordion': HTMLBlazeAccordionElement;
  }
  interface ElementTagNameMap {
    'blaze-accordion': HTMLBlazeAccordionElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-accordion': JSXElements.BlazeAccordionAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeAccordionAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLBlazeAddressHeadingElement extends HTMLStencilElement {

  }
  var HTMLBlazeAddressHeadingElement: {
    prototype: HTMLBlazeAddressHeadingElement;
    new (): HTMLBlazeAddressHeadingElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-address-heading': HTMLBlazeAddressHeadingElement;
  }
  interface ElementTagNameMap {
    'blaze-address-heading': HTMLBlazeAddressHeadingElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-address-heading': JSXElements.BlazeAddressHeadingAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeAddressHeadingAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLBlazeAddressElement extends HTMLStencilElement {

  }
  var HTMLBlazeAddressElement: {
    prototype: HTMLBlazeAddressElement;
    new (): HTMLBlazeAddressElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-address': HTMLBlazeAddressElement;
  }
  interface ElementTagNameMap {
    'blaze-address': HTMLBlazeAddressElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-address': JSXElements.BlazeAddressAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeAddressAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLBlazeAlertElement extends HTMLStencilElement {
    'close': () => void;
    'dismissible': boolean;
    'isOpen': () => boolean;
    'open': boolean;
    'show': () => void;
    'type': string;
  }
  var HTMLBlazeAlertElement: {
    prototype: HTMLBlazeAlertElement;
    new (): HTMLBlazeAlertElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-alert': HTMLBlazeAlertElement;
  }
  interface ElementTagNameMap {
    'blaze-alert': HTMLBlazeAlertElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-alert': JSXElements.BlazeAlertAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeAlertAttributes extends HTMLAttributes {
      'dismissible'?: boolean;
      'open'?: boolean;
      'type'?: string;
    }
  }
}


declare global {
  interface HTMLBlazeAvatarElement extends HTMLStencilElement {
    'size': string;
    'src': string;
    'src2': string;
    'text': string;
  }
  var HTMLBlazeAvatarElement: {
    prototype: HTMLBlazeAvatarElement;
    new (): HTMLBlazeAvatarElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-avatar': HTMLBlazeAvatarElement;
  }
  interface ElementTagNameMap {
    'blaze-avatar': HTMLBlazeAvatarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-avatar': JSXElements.BlazeAvatarAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeAvatarAttributes extends HTMLAttributes {
      'size'?: string;
      'src'?: string;
      'src2'?: string;
      'text'?: string;
    }
  }
}


declare global {
  interface HTMLBlazeBadgeElement extends HTMLStencilElement {
    'ghost': boolean;
    'rounded': boolean;
    'type': string;
  }
  var HTMLBlazeBadgeElement: {
    prototype: HTMLBlazeBadgeElement;
    new (): HTMLBlazeBadgeElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-badge': HTMLBlazeBadgeElement;
  }
  interface ElementTagNameMap {
    'blaze-badge': HTMLBlazeBadgeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-badge': JSXElements.BlazeBadgeAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeBadgeAttributes extends HTMLAttributes {
      'ghost'?: boolean;
      'rounded'?: boolean;
      'type'?: string;
    }
  }
}


declare global {
  interface HTMLBlazeBreadcrumbElement extends HTMLStencilElement {
    'href': string;
  }
  var HTMLBlazeBreadcrumbElement: {
    prototype: HTMLBlazeBreadcrumbElement;
    new (): HTMLBlazeBreadcrumbElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-breadcrumb': HTMLBlazeBreadcrumbElement;
  }
  interface ElementTagNameMap {
    'blaze-breadcrumb': HTMLBlazeBreadcrumbElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-breadcrumb': JSXElements.BlazeBreadcrumbAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeBreadcrumbAttributes extends HTMLAttributes {
      'href'?: string;
    }
  }
}


declare global {
  interface HTMLBlazeBreadcrumbsElement extends HTMLStencilElement {

  }
  var HTMLBlazeBreadcrumbsElement: {
    prototype: HTMLBlazeBreadcrumbsElement;
    new (): HTMLBlazeBreadcrumbsElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-breadcrumbs': HTMLBlazeBreadcrumbsElement;
  }
  interface ElementTagNameMap {
    'blaze-breadcrumbs': HTMLBlazeBreadcrumbsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-breadcrumbs': JSXElements.BlazeBreadcrumbsAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeBreadcrumbsAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLBlazeCardBodyElement extends HTMLStencilElement {

  }
  var HTMLBlazeCardBodyElement: {
    prototype: HTMLBlazeCardBodyElement;
    new (): HTMLBlazeCardBodyElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-card-body': HTMLBlazeCardBodyElement;
  }
  interface ElementTagNameMap {
    'blaze-card-body': HTMLBlazeCardBodyElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-card-body': JSXElements.BlazeCardBodyAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeCardBodyAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLBlazeCardFooterElement extends HTMLStencilElement {

  }
  var HTMLBlazeCardFooterElement: {
    prototype: HTMLBlazeCardFooterElement;
    new (): HTMLBlazeCardFooterElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-card-footer': HTMLBlazeCardFooterElement;
  }
  interface ElementTagNameMap {
    'blaze-card-footer': HTMLBlazeCardFooterElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-card-footer': JSXElements.BlazeCardFooterAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeCardFooterAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLBlazeCardHeaderElement extends HTMLStencilElement {

  }
  var HTMLBlazeCardHeaderElement: {
    prototype: HTMLBlazeCardHeaderElement;
    new (): HTMLBlazeCardHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-card-header': HTMLBlazeCardHeaderElement;
  }
  interface ElementTagNameMap {
    'blaze-card-header': HTMLBlazeCardHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-card-header': JSXElements.BlazeCardHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeCardHeaderAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLBlazeCardElement extends HTMLStencilElement {

  }
  var HTMLBlazeCardElement: {
    prototype: HTMLBlazeCardElement;
    new (): HTMLBlazeCardElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-card': HTMLBlazeCardElement;
  }
  interface ElementTagNameMap {
    'blaze-card': HTMLBlazeCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-card': JSXElements.BlazeCardAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeCardAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLBlazeDrawerElement extends HTMLStencilElement {
    'close': () => void;
    'dismissible': boolean;
    'isOpen': () => boolean;
    'open': boolean;
    'position': string;
    'show': () => void;
  }
  var HTMLBlazeDrawerElement: {
    prototype: HTMLBlazeDrawerElement;
    new (): HTMLBlazeDrawerElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-drawer': HTMLBlazeDrawerElement;
  }
  interface ElementTagNameMap {
    'blaze-drawer': HTMLBlazeDrawerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-drawer': JSXElements.BlazeDrawerAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeDrawerAttributes extends HTMLAttributes {
      'dismissible'?: boolean;
      'open'?: boolean;
      'position'?: string;
    }
  }
}


declare global {
  interface HTMLBlazeImageElement extends HTMLStencilElement {
    'alt': string;
    'collection': string;
    'filter': string;
    'height': number;
    'likes': boolean;
    'photo': string;
    'src': string;
    'user': string;
    'width': number;
  }
  var HTMLBlazeImageElement: {
    prototype: HTMLBlazeImageElement;
    new (): HTMLBlazeImageElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-image': HTMLBlazeImageElement;
  }
  interface ElementTagNameMap {
    'blaze-image': HTMLBlazeImageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-image': JSXElements.BlazeImageAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeImageAttributes extends HTMLAttributes {
      'alt'?: string;
      'collection'?: string;
      'filter'?: string;
      'height'?: number;
      'likes'?: boolean;
      'photo'?: string;
      'src'?: string;
      'user'?: string;
      'width'?: number;
    }
  }
}


declare global {
  interface HTMLBlazeModalElement extends HTMLStencilElement {
    'close': () => void;
    'dismissible': boolean;
    'full': boolean;
    'ghost': boolean;
    'isOpen': () => boolean;
    'open': boolean;
    'show': () => void;
  }
  var HTMLBlazeModalElement: {
    prototype: HTMLBlazeModalElement;
    new (): HTMLBlazeModalElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-modal': HTMLBlazeModalElement;
  }
  interface ElementTagNameMap {
    'blaze-modal': HTMLBlazeModalElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-modal': JSXElements.BlazeModalAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeModalAttributes extends HTMLAttributes {
      'dismissible'?: boolean;
      'full'?: boolean;
      'ghost'?: boolean;
      'open'?: boolean;
    }
  }
}


declare global {
  interface HTMLBlazePaginationElement extends HTMLStencilElement {
    'currentPage': () => number;
    'goToPage': (page: number) => void;
    'page': number;
    'pages': number;
  }
  var HTMLBlazePaginationElement: {
    prototype: HTMLBlazePaginationElement;
    new (): HTMLBlazePaginationElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-pagination': HTMLBlazePaginationElement;
  }
  interface ElementTagNameMap {
    'blaze-pagination': HTMLBlazePaginationElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-pagination': JSXElements.BlazePaginationAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazePaginationAttributes extends HTMLAttributes {
      'onOnPageChange'?: (event: CustomEvent) => void;
      'page'?: number;
      'pages'?: number;
    }
  }
}


declare global {
  interface HTMLBlazePanelElement extends HTMLStencilElement {
    'height': number;
  }
  var HTMLBlazePanelElement: {
    prototype: HTMLBlazePanelElement;
    new (): HTMLBlazePanelElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-panel': HTMLBlazePanelElement;
  }
  interface ElementTagNameMap {
    'blaze-panel': HTMLBlazePanelElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-panel': JSXElements.BlazePanelAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazePanelAttributes extends HTMLAttributes {
      'height'?: number;
    }
  }
}


declare global {
  interface HTMLBlazeProgressElement extends HTMLStencilElement {
    'percentage': string;
    'rounded': boolean;
    'size': string;
    'type': string;
  }
  var HTMLBlazeProgressElement: {
    prototype: HTMLBlazeProgressElement;
    new (): HTMLBlazeProgressElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-progress': HTMLBlazeProgressElement;
  }
  interface ElementTagNameMap {
    'blaze-progress': HTMLBlazeProgressElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-progress': JSXElements.BlazeProgressAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeProgressAttributes extends HTMLAttributes {
      'percentage'?: string;
      'rounded'?: boolean;
      'size'?: string;
      'type'?: string;
    }
  }
}


declare global {
  interface HTMLBlazeTabElement extends HTMLStencilElement {
    'disabled': boolean;
    'header': string;
    'open': boolean;
  }
  var HTMLBlazeTabElement: {
    prototype: HTMLBlazeTabElement;
    new (): HTMLBlazeTabElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-tab': HTMLBlazeTabElement;
  }
  interface ElementTagNameMap {
    'blaze-tab': HTMLBlazeTabElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-tab': JSXElements.BlazeTabAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeTabAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'header'?: string;
      'open'?: boolean;
    }
  }
}


declare global {
  interface HTMLBlazeTabsElement extends HTMLStencilElement {
    'currentTab': () => number;
    'openTab': (tabIndex: number) => void;
    'type': string;
  }
  var HTMLBlazeTabsElement: {
    prototype: HTMLBlazeTabsElement;
    new (): HTMLBlazeTabsElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-tabs': HTMLBlazeTabsElement;
  }
  interface ElementTagNameMap {
    'blaze-tabs': HTMLBlazeTabsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-tabs': JSXElements.BlazeTabsAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeTabsAttributes extends HTMLAttributes {
      'type'?: string;
    }
  }
}


declare global {
  interface HTMLBlazeToastsElement extends HTMLStencilElement {
    'position': string;
  }
  var HTMLBlazeToastsElement: {
    prototype: HTMLBlazeToastsElement;
    new (): HTMLBlazeToastsElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-toasts': HTMLBlazeToastsElement;
  }
  interface ElementTagNameMap {
    'blaze-toasts': HTMLBlazeToastsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-toasts': JSXElements.BlazeToastsAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeToastsAttributes extends HTMLAttributes {
      'position'?: string;
    }
  }
}


declare global {
  interface HTMLBlazeToggleElement extends HTMLStencilElement {
    'isToggled': () => boolean;
    'toggled': boolean;
    'type': string;
  }
  var HTMLBlazeToggleElement: {
    prototype: HTMLBlazeToggleElement;
    new (): HTMLBlazeToggleElement;
  };
  interface HTMLElementTagNameMap {
    'blaze-toggle': HTMLBlazeToggleElement;
  }
  interface ElementTagNameMap {
    'blaze-toggle': HTMLBlazeToggleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blaze-toggle': JSXElements.BlazeToggleAttributes;
    }
  }
  namespace JSXElements {
    export interface BlazeToggleAttributes extends HTMLAttributes {
      'toggled'?: boolean;
      'type'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
